version: '3.8'
services:
  service:
    build: ./service/
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - cache
  service_history:
    build: ./serviceHistory/
    restart: always
    ports:
      - "3001:3001"
    depends_on:
      - cache
  service_status:
    build: ./serviceStatus/
    restart: always
    ports:
      - "3002:3002"
    depends_on:
      - postgres
    environment:
      POSTGRES_USER: orderapp
      POSTGRES_PASSWORD: orderapps
      POSTGRES_DB: orderapp
  order:
    build: ./order/
    restart: always
    depends_on:
      - cache
      - postgres
    environment:
      POSTGRES_USER: orderapp
      POSTGRES_PASSWORD: orderapps
      POSTGRES_DB: orderapp
  payment:
    build: ./payment/
    restart: always
    depends_on:
      - cache
  delivery:
    build: ./delivery/
    restart: always
    depends_on:
      - cache
  status:
    build: ./status/
    restart: always
    depends_on:
      - cache
      - kafka
  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server
    volumes: 
      - cache:/data
  postgres:
    image: debezium/example-postgres:1.8
    restart: always
    ports:
     - 5432:5432
    environment:
      POSTGRES_USER: orderapp
      POSTGRES_PASSWORD: orderapps
      POSTGRES_DB: orderapp
    volumes:
      - ./db/:/docker-entrypoint-initdb.d
  zookeeper:
    image: debezium/zookeeper
    ports:
     - 2181:2181
     - 2888:2888
     - 3888:3888
  kafka:
    container_name: kafka
    restart: always
    image: debezium/kafka:1.8
    ports:
     - 9092:9092
    links:
     - zookeeper
    environment:
     - ZOOKEEPER_CONNECT=zookeeper:2181
  # postgres:
  #   image: debezium/example-postgres
  #   ports:
  #    - 5432:5432
  #   environment:
  #     POSTGRES_USER: orderapp
  #     POSTGRES_PASSWORD: orderapps
  #     POSTGRES_DB: orderapp
  connect:
    image: debezium/connect:1.8
    restart: always
    ports:
     - 8083:8083
    links:
     - kafka
     - postgres
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      # KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      # VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      # CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.3
    environment:
     - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
     - SCHEMA_REGISTRY_HOST_NAME=schema-registry
     - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
    depends_on: [zookeeper, kafka]

  kafka-topics-ui:
    container_name: kafka-topics-ui
    image: parrotstream/kafka-topics-ui:latest
    external_links:
    - kafka
    ports:
    - 8001:8001
    environment:
      KAFKA_REST_PROXY_URL: http://kafka-rest:8082
      PROXY: "true"
      PORT: 8001

  kafka-rest:
    image: confluentinc/cp-kafka-rest:6.0.0
    hostname: kafka-rest-1
    container_name: kafka-rest-1
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_HOST_NAME: kafka-rest
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:9092
volumes:
  cache:
    driver: local